# -*- coding: utf-8 -*-
#
# Copyright (C) 2023 CERN.
#
# ZenodoRDM is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""IIIF manifest resource for ZenodoRDM."""

import os
from datetime import datetime

from flask import current_app, g, request, url_for
from invenio_access.permissions import system_identity
from invenio_records_resources.services.errors import PermissionDeniedError

original_manifest_resource = None  # Will store the original implementation

def iiif_image_key(*args):
    """Create an image key for IIIF URLs.
    
    Joins the arguments with forward slashes.
    """
    return "/".join(args)

def patched_iiif_manifest(self, pid_value):
    """Generate a IIIF manifest for a record.

    This enhances the standard IIIF manifest by adding PDF PTIF files.
    """
    try:
        record = self.service.read(
            id_=pid_value,
            identity=g.identity,
            expand=True,
        )
        
        # Use the original implementation to create the base manifest
        try:
            manifest = original_manifest_resource(self, pid_value)
        except (PermissionDeniedError, Exception) as e:
            # If the original implementation fails, try with system identity
            record = self.service.read(
                id_=pid_value,
                identity=system_identity,
                expand=True,
            )
            # Create a basic manifest
            manifest = {
                "@context": "http://iiif.io/api/presentation/2/context.json",
                "@type": "sc:Manifest",
                "@id": url_for(
                    "invenio_app_rdm_records.iiif_manifest",
                    pid_value=pid_value,
                    _external=True,
                ),
                "label": record["metadata"].get("title", ""),
                "metadata": [
                    {
                        "label": "Publication Date",
                        "value": datetime.now().strftime("%Y-%m-%d"),
                    }
                ],
                "description": "Manifest generated by InvenioRDM",
                "sequences": [
                    {
                        "@id": url_for(
                            "invenio_app_rdm_records.iiif_manifest",
                            pid_value=pid_value,
                            _external=True,
                        )
                        + "/sequence/default",
                        "@type": "sc:Sequence",
                        "label": "Current Page Order",
                        "viewingDirection": "left-to-right",
                        "viewingHint": "individuals",
                        "canvases": [],
                    }
                ],
            }
        
        # Check if manifest already has canvases
        has_canvases = len(manifest["sequences"][0]["canvases"]) > 0
        
        if not has_canvases:
            # Check for PDF files with PTIF in IIIF images directory
            pdf_files = [f for f in record["files"]["entries"] if f["key"].lower().endswith(".pdf")]
            
            if pdf_files:
                # Look for PTIF files for each PDF in the IIIF directory
                images_dir = os.path.join(current_app.instance_path, "images", "public")
                sequences = manifest["sequences"][0]
                canvases = sequences["canvases"]
                
                for pdf_file in pdf_files:
                    pdf_filename = pdf_file["key"]
                    pdf_ptif_filename = f"{pdf_filename}.ptif"
                    
                    # Check all possible locations for PTIF files
                    for pattern_prefix in ["21", "20"]:
                        dir_pattern = os.path.join(images_dir, pattern_prefix, "6_", "_")
                        ptif_path = os.path.join(dir_pattern, pdf_ptif_filename)
                        
                        if os.path.exists(ptif_path) and os.path.isfile(ptif_path):
                            current_app.logger.info(f"Found PTIF file for PDF {pdf_filename}: {ptif_path}")
                            
                            # Get dimensions of the PTIF file
                            try:
                                import pyvips
                                image = pyvips.Image.new_from_file(ptif_path)
                                width = image.width
                                height = image.height
                                
                                # Create canvas for this PTIF file
                                canvas_id = url_for(
                                    "invenio_app_rdm_records.iiif_manifest",
                                    pid_value=pid_value,
                                    _external=True,
                                ) + f"/canvas/{pdf_ptif_filename}"
                                
                                iiif_base_url = url_for(
                                    "invenio_iiif.iiif_base",
                                    image_key=iiif_image_key(pattern_prefix, "6_", "_", pdf_ptif_filename),
                                    _external=True,
                                )
                                
                                canvas = {
                                    "@id": canvas_id,
                                    "@type": "sc:Canvas",
                                    "label": f"Page from {pdf_filename}",
                                    "width": width,
                                    "height": height,
                                    "images": [
                                        {
                                            "@id": canvas_id + "/image",
                                            "@type": "oa:Annotation",
                                            "motivation": "sc:painting",
                                            "resource": {
                                                "@id": f"{iiif_base_url}/full/full/0/default.jpg",
                                                "@type": "dctypes:Image",
                                                "format": "image/jpeg",
                                                "width": width,
                                                "height": height,
                                                "service": {
                                                    "@id": iiif_base_url,
                                                    "@context": "http://iiif.io/api/image/2/context.json",
                                                    "profile": "http://iiif.io/api/image/2/level1.json",
                                                },
                                            },
                                            "on": canvas_id,
                                        }
                                    ],
                                }
                                
                                canvases.append(canvas)
                                current_app.logger.info(f"Added canvas for {pdf_ptif_filename}")
                                
                                # Check for multi-page PDF PTIF files
                                page_count = 1
                                while True:
                                    page_ptif_filename = f"{pdf_filename}.page-{page_count}.ptif"
                                    page_ptif_path = os.path.join(dir_pattern, page_ptif_filename)
                                    
                                    if os.path.exists(page_ptif_path) and os.path.isfile(page_ptif_path):
                                        try:
                                            page_image = pyvips.Image.new_from_file(page_ptif_path)
                                            page_width = page_image.width
                                            page_height = page_image.height
                                            
                                            page_canvas_id = url_for(
                                                "invenio_app_rdm_records.iiif_manifest",
                                                pid_value=pid_value,
                                                _external=True,
                                            ) + f"/canvas/{page_ptif_filename}"
                                            
                                            page_iiif_base_url = url_for(
                                                "invenio_iiif.iiif_base",
                                                image_key=iiif_image_key(pattern_prefix, "6_", "_", page_ptif_filename),
                                                _external=True,
                                            )
                                            
                                            page_canvas = {
                                                "@id": page_canvas_id,
                                                "@type": "sc:Canvas",
                                                "label": f"Page {page_count} from {pdf_filename}",
                                                "width": page_width,
                                                "height": page_height,
                                                "images": [
                                                    {
                                                        "@id": page_canvas_id + "/image",
                                                        "@type": "oa:Annotation",
                                                        "motivation": "sc:painting",
                                                        "resource": {
                                                            "@id": f"{page_iiif_base_url}/full/full/0/default.jpg",
                                                            "@type": "dctypes:Image",
                                                            "format": "image/jpeg",
                                                            "width": page_width,
                                                            "height": page_height,
                                                            "service": {
                                                                "@id": page_iiif_base_url,
                                                                "@context": "http://iiif.io/api/image/2/context.json",
                                                                "profile": "http://iiif.io/api/image/2/level1.json",
                                                            },
                                                        },
                                                        "on": page_canvas_id,
                                                    }
                                                ],
                                            }
                                            
                                            canvases.append(page_canvas)
                                            current_app.logger.info(f"Added canvas for {page_ptif_filename}")
                                            page_count += 1
                                        except Exception as e:
                                            current_app.logger.error(f"Error processing page PTIF: {str(e)}")
                                            break
                                    else:
                                        break
                                
                            except Exception as e:
                                current_app.logger.error(f"Error getting PTIF dimensions: {str(e)}")
                            
                            # We found a PTIF, no need to check other patterns
                            break
        
        return manifest
        
    except PermissionDeniedError:
        return {
            "@context": "http://iiif.io/api/presentation/2/context.json",
            "@type": "sc:Manifest",
            "@id": url_for(
                "invenio_app_rdm_records.iiif_manifest", pid_value=pid_value, _external=True
            ),
            "label": "Access Denied",
            "metadata": [
                {"label": "Error", "value": "You do not have permission to access this record."}
            ],
            "sequences": [
                {
                    "@id": url_for(
                        "invenio_app_rdm_records.iiif_manifest", pid_value=pid_value, _external=True
                    )
                    + "/sequence/default",
                    "@type": "sc:Sequence",
                    "label": "Current Page Order",
                    "viewingDirection": "left-to-right",
                    "viewingHint": "individuals",
                    "canvases": [],
                }
            ],
        }

def patch_iiif_manifest():
    """Patch the IIIF manifest resource to include PDF PTIF files."""
    from invenio_app_rdm.records.resources.config import (
        RDMRecordResourceConfig,
    )
    
    global original_manifest_resource
    
    # Get the original implementation
    original_manifest_resource = RDMRecordResourceConfig.iiif_manifest
    
    # Replace with our implementation
    RDMRecordResourceConfig.iiif_manifest = patched_iiif_manifest
    
    current_app.logger.info("IIIF manifest resource patched to include PDF PTIF files") 